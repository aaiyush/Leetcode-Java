/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }
        return mergeSort(head);
    }
    
    private ListNode mergeSort(ListNode head) {
        if(head.next == null) {
            return head;
        }
        // breaking list into 2 lists l1 and l2
        ListNode l1 = head;
        ListNode l2 = null;
        // finding mid using fast-slow pointer technique
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        // l2 starts from middle + 1 th node
        l2 = slow.next;
        slow.next = null;
        l1 = mergeSort(l1);
        l2 = mergeSort(l2);
        // merging l1 and l2
        return merge(l1, l2);
    }
    private ListNode merge(ListNode l1, ListNode l2) {
        // nh : new head
        ListNode nh = null;
        ListNode prev = null;
        while(l1 != null && l2 != null) {
            if(l1.val < l2.val) {
                if(nh != null) {
                    prev.next = l1;
                    prev = l1;
                    l1 = l1.next;
                }
                else {
                    nh = l1;
                    prev = l1;
                    l1 = l1.next;
                }
            }
            else {
                if(nh != null) {
                    prev.next = l2;
                    prev = l2;
                    l2 = l2.next;
                }
                else {
                    nh = l2;
                    prev = l2;
                    l2 = l2.next;
                }
            }
        }
        if(l1 != null) {
            prev.next = l1;
        }
        if(l2 != null) {
            prev.next = l2;
        }
        return nh;
    }
}
